package com.xiaohe66.demo.arithmetic.leetcode.math;

/**
 * 难度：中等
 * <p>
 * 通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1。
 * 相反，我们设计了一个笨阶乘 clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。
 * 例如，clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1。
 * 然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。
 * 另外，我们使用的除法是地板除法（floor division），所以 10 * 9 / 8 等于 11。这保证结果是一个整数。
 * 实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。
 *  
 * 示例 1：
 * 输入：4
 * 输出：7
 * 解释：7 = 4 * 3 / 2 + 1
 *
 * <p>
 * 示例 2：
 * 输入：10
 * 输出：12
 * 解释：12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
 *
 * <p>
 * 提示：
 * 1 <= N <= 10000
 * -2^31 <= answer <= 2^31 - 1  （答案保证符合 32 位整数。）
 *
 * <p>
 * 通过次数10,106提交次数17,126
 *
 * @author xiaohe
 * @time 2021.04.01 10:02
 */
public class T1006笨阶乘 {

    /**
     * n > 3, 前3项 = N+1
     * n > 8, 前3项后，每4项(当最后剩余4项时不包括) = 0
     *
     * <p>
     * 分析：
     * 5 --> 3   +2-1                  =  5+1 +1  --> N + 2 (余1)
     * 6 --> 4   +3-2*1                =  6+1 +1  --> N + 2 (余2)
     * 7 --> 5   +4-3*2/1              =  7+1 -2  --> N - 1 (余3)
     * 8 --> 6   (+5-4*3/2) + 1        =  8+1 +0  --> N + 1 (余0)
     * 9 --> 7   (+6-5*4/3) + 2 -1     =  9+1 +1  --> N + 2 (余1)
     * 10 --> 8   ... + 3 - 2 * 1       = 10+1 +1  --> N + 2 (余2)
     * 11 --> 9   ... + 4 - 3 * 2 / 1   = 11+1 +2  --> N - 1 (余3)
     *
     * <p>
     * 推出：
     * 余0 = N + 1
     * 余1 = N + 2
     * 余2 = N + 2
     * 余3 = N - 1
     *
     * <p>
     * 执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
     * 内存消耗：35.3 MB, 在所有 Java 提交中击败了61.93%的用户
     */
    public int clumsy(int N) {

        switch (N) {
            case 1:
                return 1;
            case 2:
                // 2 * 1
                return 2;
            case 3:
                // 3 * 2 / 1
                return 6;
            case 4:
                // 4 * 3 / 2 + 1 = 12 /2 + 1 = 7
                return 7;
            default:

                switch (N % 4) {
                    case 0:
                        return N + 1;
                    case 3:
                        return N - 1;
                    default:
                        return N + 2;
                }
        }
    }

    /**
     * 执行用时：2 ms, 在所有 Java 提交中击败了47.10%的用户
     * 内存消耗：35.5 MB, 在所有 Java 提交中击败了32.26%的用户
     */
    public int clumsy2(int N) {

        if (N == 1) {
            return N;
        }

        int sum = 0;
        int tmp = N;
        int i = 1;
        int n;

        while (i < N) {
            n = N - i;
            switch (i % 4) {
                case 0:
                    tmp = -n;
                    break;
                case 1:
                    tmp = tmp * n;
                    break;
                case 2:
                    tmp = tmp / n;
                    break;
                case 3:
                    sum = sum + tmp + n;
                default:
            }
            i++;
        }

        if (N % 4 != 0) {
            sum += tmp;
        }

        return sum;
    }

}
