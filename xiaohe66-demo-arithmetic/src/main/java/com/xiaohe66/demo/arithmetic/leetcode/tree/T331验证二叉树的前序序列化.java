package com.xiaohe66.demo.arithmetic.leetcode.tree;

/**
 * 序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。
 *
 * <p>
 * _9_
 * /   \
 * 3     2
 * / \   / \
 * 4   1  #  6
 * / \ / \   / \
 * # # # #   # #
 * 例如，上面的二叉树可以被序列化为字符串 "9,3,4,#,#,1,#,#,2,#,6,#,#"，其中 # 代表一个空节点。
 * 给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。
 * 每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的 '#' 。
 * 你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如 "1,,3" 。
 *
 * <p>
 * 示例 1:
 * 输入: "9,3,4,#,#,1,#,#,2,#,6,#,#"
 * 输出: true
 *
 * <p>
 * 示例 2:
 * 输入: "1,#"
 * 输出: false
 *
 * <p>
 * 示例 3:
 * 输入: "9,#,#,1"
 * 输出: false
 *
 * <p>
 * 通过次数17,060提交次数35,965
 *
 * @author xiaohe
 * @time 2021.03.12 10:52
 */
public class T331验证二叉树的前序序列化 {

    /**
     * 思路：
     * 将整个2叉树分成n个子树，当子树无效时，直接返回false。
     * 而当子树有效时，返回将该子树转变成#，并继续判断其它子树，直至所有子树都有效时，则返回true
     *
     * <p>
     * 从尾部开始遍历，当存在 1个数字 + 2个#时，说明子树有效。
     *
     * <p>
     * 执行用时：1 ms, 在所有 Java 提交中击败了100.00%的用户
     * 内存消耗：36.8 MB, 在所有 Java 提交中击败了89.05%的用户
     */
    public boolean isValidSerialization(String preorder) {

        int nilQty = 0;

        for (int i = preorder.length() - 1; i >= 0; ) {

            char c = preorder.charAt(i);

            if (c == '#') {
                nilQty++;
                i -= 2;

            } else {
                nilQty -= 1;
                if (nilQty < 1) {
                    return false;
                }

                do {
                    i--;
                } while (i >= 0 && preorder.charAt(i) != ',');
                i--;

            }

        }
        return nilQty == 1;
    }

}
