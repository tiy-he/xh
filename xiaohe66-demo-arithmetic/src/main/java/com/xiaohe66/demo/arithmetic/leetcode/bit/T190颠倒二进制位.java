package com.xiaohe66.demo.arithmetic.leetcode.bit;

/**
 * 颠倒给定的 32 位无符号整数的二进制位。
 * <p>
 * 提示：
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，
 * 因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 *  
 * <p>
 * 进阶:
 * 如果多次调用这个函数，你将如何优化你的算法？
 *  
 * <p>
 * 示例 1：
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 * 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * <p>
 * 示例 2：
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
 *  
 * <p>
 * 提示：
 * 输入是一个长度为 32 的二进制字符串
 *
 * <p>
 * 通过次数79,303提交次数121,562
 *
 * @author xiaohe
 * @time 2021.03.29 09:35
 */
public class T190颠倒二进制位 {


    /**
     * 循环取出每1位，再拼起来
     *
     * <p>
     * 执行用时：1 ms, 在所有 Java 提交中击败了100.00%的用户
     * 内存消耗：38.3 MB, 在所有 Java 提交中击败了24.72%的用户
     */
    public int reverseBits(int n) {

        int ret = 0;
        for (int i = 1; i <= 32; i++) {
            ret = ret << 1;
            ret += n & 1;
            n = n >>> 1;
        }

        return ret;
    }


    /**
     * 思路：在原数上分别交换bit位
     *
     * <p>
     * 运算过程：
     * 原： abcd efgh
     * 换1：efgh abcd
     * 换2: gh ef cd ab
     * 换3: hg fe dc ba
     *
     * <p>
     * 执行用时：1 ms, 在所有 Java 提交中击败了100.00%的用户
     * 内存消耗：38.3 MB, 在所有 Java 提交中击败了19.31%的用户
     */
    public int reverseBits2(int n) {

        n = n >>> 16 | n << 16;
        n = ((n & 0xff00ff00) >>> 8) | ((n & 0x00ff00ff) << 8);
        n = ((n & 0xF0F0F0F0) >>> 4) | ((n & 0x0F0F0F0F) << 4);
        n = ((n & 0xcccccccc) >>> 2) | ((n & 0x33333333) << 2);
        n = ((n & 0xaaaaaaaa) >>> 1) | ((n & 0x55555555) << 1);

        return n;

    }

}
